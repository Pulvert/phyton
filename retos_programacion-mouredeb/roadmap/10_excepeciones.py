{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNeeLluB9m676DykY0Sg5qb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8LZHBz6Z6i6D","executionInfo":{"status":"ok","timestamp":1720004896534,"user_tz":-120,"elapsed":246,"user":{"displayName":"Diego","userId":"07408759357351876848"}},"outputId":"3faf5319-3919-485d-b2fa-da60955a0b12"},"outputs":[{"output_type":"stream","name":"stdout","text":["Ocurrió un error:<class 'ZeroDivisionError'>\n","Finalizando la ejecución del bloque try-except.\n","Ocurrió un error:<class 'IndexError'>\n","Ocurrió un error con el primer parámetro: Debe de ser mayor a 0\n","Finalizando la ejecución del primer parámetro\n","Ocurrió un error con el segundo parámetro:<class 'IndexError'>\n","Finalizando la ejecución del segundo parámetro\n","Hello World\n","No se ha producido ningún error con el tercer parámetro\n","Finalizando la ejecución del tercer parámetro\n"]}],"source":["\"\"\"\n"," * Explora el concepto de manejo de excepciones según tu lenguaje.\n"," * Fuerza un error en tu código, captura el error, imprime dicho error\n"," * y evita que el programa se detenga de manera inesperada.\n"," * Prueba a dividir \"10/0\" o acceder a un índice no existente\n"," * de un listado para intentar provocar un error.\n"," *\n"," * DIFICULTAD EXTRA (opcional):\n"," * Crea una función que sea capaz de procesar parámetros, pero que también\n"," * pueda lanzar 3 tipos diferentes de excepciones (una de ellas tiene que\n"," * corresponderse con un tipo de excepción creada por nosotros de manera\n"," * personalizada, y debe ser lanzada de manera manual) en caso de error.\n"," * - Captura todas las excepciones desde el lugar donde llamas a la función.\n"," * - Imprime el tipo de error.\n"," * - Imprime si no se ha producido ningún error.\n"," * - Imprime que la ejecución ha finalizado.\n","\"\"\"\n","\n","try:\n","  x = 10/0\n","except ZeroDivisionError:\n","  print(f\"Ocurrió un error:{ZeroDivisionError}\")\n","\n","except Exception as e:\n","    # Código que se ejecuta para cualquier otro error\n","    print(f\"Ocurrió un error: {e}\")\n","\n","else:\n","    # Código que se ejecuta si no ocurre ningún error\n","    print(\"El cálculo se realizó correctamente.\")\n","finally:\n","    # Código que se ejecuta siempre, ocurra o no un error\n","    print(\"Finalizando la ejecución del bloque try-except.\")\n","\n","try:\n","  y = [1,2,3]\n","  print(y[3])\n","\n","except IndexError:\n","  print(f\"Ocurrió un error:{IndexError}\")\n","\n","# Extra\n","\n","def exceptions (n: int, l: list, s: str):\n","\n","  try:\n","    if n < 0:\n","      raise Exception (\"Debe de ser mayor a 0\")\n","\n","  except:\n","    print(\"Ocurrió un error con el primer parámetro: Debe de ser mayor a 0\")\n","\n","  finally:\n","    # Código que se ejecuta siempre, ocurra o no un error\n","    print(\"Finalizando la ejecución del primer parámetro\")\n","\n","  try:\n","    print(l[3])\n","\n","  except IndexError:\n","    print(f\"Ocurrió un error con el segundo parámetro:{IndexError}\")\n","\n","  else:\n","    # Código que se ejecuta si no ocurre ningún error\n","    print(\"No se ha producido ningún error con el segundo parámetro\")\n","\n","  finally:\n","    # Código que se ejecuta siempre, ocurra o no un error\n","    print(\"Finalizando la ejecución del segundo parámetro\")\n","\n","  try:\n","    print(s+\" World\")\n","\n","  except TypeError:\n","    print(f\"Ocurrió un error con el tercer parámetro:{ValueError}\")\n","\n","  else:\n","    # Código que se ejecuta si no ocurre ningún error\n","    print(\"No se ha producido ningún error con el tercer parámetro\")\n","\n","  finally:\n","    # Código que se ejecuta siempre, ocurra o no un error\n","    print(\"Finalizando la ejecución del tercer parámetro\")\n","\n","exceptions (-1, [1,2,3], \"Hello\")\n","\n","# Solución\n","\n","\"\"\"\n","Ejercicio\n","\"\"\"\n","\n","try:\n","    print(10/0)\n","    print([1, 2, 3, 4][4])\n","except Exception as e:\n","    print(f\"Se ha producido un error: {e} ({type(e).__name__})\")\n","\n","\"\"\"\n","Extra\n","\"\"\"\n","\n","class StrTypeError(Exception):\n","    pass\n","\n","def process_params(parameters: list):\n","\n","    if len(parameters) < 3:\n","        raise IndexError()\n","    elif parameters[1] == 0:\n","        raise ZeroDivisionError()\n","    elif type(parameters[2]) == str:\n","        raise StrTypeError(\n","            \"El tercer elemento no puede ser una cadena de texto.\")\n","\n","    print(parameters[2])\n","    print(parameters[0]/parameters[1])\n","    print(parameters[2] + 5)\n","\n","\n","try:\n","    process_params([1, 2, 3, 4])\n","except IndexError as e:\n","    print(\"El número de elementos de la lista debe ser mayor que dos.\")\n","except ZeroDivisionError as e:\n","    print(\"El segundo elemento de la lista no puede ser un cero.\")\n","except StrTypeError as e:\n","    print(f\"{e}\")\n","except Exception as e:\n","    print(f\"Se ha producido un error inesperado: {e}\")\n","else:\n","    print(\"No se ha producido ningún error.\")\n","finally:\n","    print(\"El programa finaliza sin detenerse.\")\n"]}]}